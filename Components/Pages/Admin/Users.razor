@page "/admin/users"
@rendermode InteractiveServer
@using ManagerSystem.Models.Auth
@using ManagerSystem.Services.Auth
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>用户管理</PageTitle>

<ManagerSystem.Components.Auth.AuthorizeView Resource="/admin/users" PermissionType="PermissionType.Page">
    <ChildContent>
        <div class="container mx-auto px-4 py-8">
            <h1 class="text-2xl font-bold mb-6">用户管理</h1>

            <div class="mb-4 flex justify-between items-center">
                <button @onclick="() => ShowUserModal(new User())" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    添加用户
                </button>
            </div>

            @if (users == null)
            {
                <p>加载中...</p>
            }
            else if (!users.Any())
            {
                <p>暂无用户数据</p>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-200">
                        <thead>
                            <tr>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">用户名</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">邮箱</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">状态</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">创建时间</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">角色</th>
                                <th class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td class="py-2 px-4 border-b border-gray-200">@user.Id</td>
                                    <td class="py-2 px-4 border-b border-gray-200">@user.Username</td>
                                    <td class="py-2 px-4 border-b border-gray-200">@user.Email</td>
                                    <td class="py-2 px-4 border-b border-gray-200">
                                        @if (user.IsActive)
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">活跃</span>
                                        }
                                        else
                                        {
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">禁用</span>
                                        }
                                    </td>
                                    <td class="py-2 px-4 border-b border-gray-200">@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                                    <td class="py-2 px-4 border-b border-gray-200">
                                        @if (user.UserRoles != null && user.UserRoles.Any())
                                        {
                                            @string.Join(", ", user.UserRoles.Select(ur => ur.Role.Name))
                                        }
                                        else
                                        {
                                            <span>无角色</span>
                                        }
                                    </td>
                                    <td class="py-2 px-4 border-b border-gray-200">
                                        <button @onclick="() => ShowUserModal(user)" class="text-blue-500 hover:text-blue-700 mr-2">编辑</button>
                                        <button @onclick="() => DeleteUser(user.Id)" class="text-red-500 hover:text-red-700">删除</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (showModal)
            {
                <div class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4">
                    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
                        <h2 class="text-xl font-bold mb-4">@(currentUser.Id == 0 ? "添加用户" : "编辑用户")</h2>
                        
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="username">用户名</label>
                            <input type="text" id="username" @bind="currentUser.Username" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                        </div>
                        
                        @if (currentUser.Id == 0)
                        {
                            <div class="mb-4">
                                <label class="block text-gray-700 text-sm font-bold mb-2" for="password">密码</label>
                                <input type="password" id="password" @bind="password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                            </div>
                        }
                        
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="email">邮箱</label>
                            <input type="email" id="email" @bind="currentUser.Email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="isActive">状态</label>
                            <select id="isActive" @bind="currentUser.IsActive" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                <option value="true">活跃</option>
                                <option value="false">禁用</option>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2">角色</label>
                            @if (roles != null)
                            {
                                @foreach (var role in roles)
                                {
                                    <div class="flex items-center mb-2">
                                        <input type="checkbox" id="role-@role.Id" 
                                            checked="@IsRoleSelected(role.Id)" 
                                            @onchange="(e) => ToggleRole(role.Id, e.Value != null && (bool)e.Value)" 
                                            class="mr-2" />
                                        <label for="role-@role.Id">@role.Name</label>
                                    </div>
                                }
                            }
                        </div>
                        
                        <div class="flex justify-end">
                            <button @onclick="CloseModal" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded mr-2">
                                取消
                            </button>
                            <button @onclick="SaveUser" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                保存
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </ChildContent>
    <UnauthorizedContent>
        <div class="text-red-500 text-center mt-8">您没有访问该页面的权限，请联系管理员。</div>
    </UnauthorizedContent>
</ManagerSystem.Components.Auth.AuthorizeView>

@code {
    private List<User>? users;
    private List<Role>? roles;
    private User currentUser = new User();
    private string password = string.Empty;
    private bool showModal = false;
    private List<int> selectedRoleIds = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        users = await AuthService.GetAllUsersAsync();
        roles = await AuthService.GetAllRolesAsync();
    }

    private void ShowUserModal(User user)
    {
        currentUser = user.Id == 0 ? new User() : new User
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email,
            IsActive = user.IsActive,
            CreatedAt = user.CreatedAt,
            LastLogin = user.LastLogin,
            PasswordHash = user.PasswordHash
        };

        password = string.Empty;
        selectedRoleIds.Clear();

        if (user.Id > 0 && user.UserRoles != null)
        {
            foreach (var userRole in user.UserRoles)
            {
                selectedRoleIds.Add(userRole.RoleId);
            }
        }

        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private bool IsRoleSelected(int roleId)
    {
        return selectedRoleIds.Contains(roleId);
    }

    private void ToggleRole(int roleId, bool isSelected)
    {
        if (isSelected && !selectedRoleIds.Contains(roleId))
        {
            selectedRoleIds.Add(roleId);
        }
        else if (!isSelected && selectedRoleIds.Contains(roleId))
        {
            selectedRoleIds.Remove(roleId);
        }
    }

    private async Task SaveUser()
    {
        if (string.IsNullOrWhiteSpace(currentUser.Username))
        {
            // 显示错误信息
            return;
        }

        if (currentUser.Id == 0)
        {
            // 创建新用户
            if (string.IsNullOrWhiteSpace(password))
            {
                // 显示错误信息
                return;
            }

            await AuthService.RegisterUserAsync(currentUser, password, selectedRoleIds.ToArray());
        }
        else
        {
            // 更新现有用户
            await AuthService.UpdateUserAsync(currentUser);

            // 更新用户角色关系需要额外处理，这里简化处理
            // 实际应用中应该在AuthService中添加更新用户角色的方法
        }

        await LoadData();
        CloseModal();
    }

    private async Task DeleteUser(int userId)
    {
        if (await AuthService.DeleteUserAsync(userId))
        {
            await LoadData();
        }
    }
}